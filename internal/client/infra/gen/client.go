// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package gen

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Post1ApplianceOrdersWithBody request with any body
	Post1ApplianceOrdersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1ApplianceOrdersWithFormdataBody(ctx context.Context, body Post1ApplianceOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get1Appliances request
	Get1Appliances(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1AppliancesWithBody request with any body
	Post1AppliancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1AppliancesWithFormdataBody(ctx context.Context, body Post1AppliancesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1AppliancesApplianceidWithBody request with any body
	Post1AppliancesApplianceidWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1AppliancesApplianceidWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1AppliancesApplianceidAirconSettingsWithBody request with any body
	Post1AppliancesApplianceidAirconSettingsWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1AppliancesApplianceidAirconSettingsWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidAirconSettingsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1AppliancesApplianceidDeleteWithBody request with any body
	Post1AppliancesApplianceidDeleteWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1AppliancesApplianceidDeleteWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1AppliancesApplianceidLightWithBody request with any body
	Post1AppliancesApplianceidLightWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1AppliancesApplianceidLightWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidLightFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1AppliancesApplianceidLightProjectorWithBody request with any body
	Post1AppliancesApplianceidLightProjectorWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1AppliancesApplianceidLightProjectorWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidLightProjectorFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1AppliancesApplianceidSignalOrdersWithBody request with any body
	Post1AppliancesApplianceidSignalOrdersWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1AppliancesApplianceidSignalOrdersWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidSignalOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get1AppliancesApplianceidSignals request
	Get1AppliancesApplianceidSignals(ctx context.Context, applianceid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1AppliancesApplianceidSignalsWithBody request with any body
	Post1AppliancesApplianceidSignalsWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1AppliancesApplianceidSignalsWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidSignalsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1AppliancesApplianceidTvWithBody request with any body
	Post1AppliancesApplianceidTvWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1AppliancesApplianceidTvWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidTvFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1DetectapplianceWithBody request with any body
	Post1DetectapplianceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1DetectapplianceWithFormdataBody(ctx context.Context, body Post1DetectapplianceFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get1Devices request
	Get1Devices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1DevicesDeviceidWithBody request with any body
	Post1DevicesDeviceidWithBody(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1DevicesDeviceidWithFormdataBody(ctx context.Context, deviceid string, body Post1DevicesDeviceidFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get1DevicesDeviceidAppliances request
	Get1DevicesDeviceidAppliances(ctx context.Context, deviceid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1DevicesDeviceidDeleteWithBody request with any body
	Post1DevicesDeviceidDeleteWithBody(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1DevicesDeviceidDeleteWithFormdataBody(ctx context.Context, deviceid string, body Post1DevicesDeviceidDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1DevicesDeviceidHumidityOffsetWithBody request with any body
	Post1DevicesDeviceidHumidityOffsetWithBody(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1DevicesDeviceidHumidityOffsetWithFormdataBody(ctx context.Context, deviceid string, body Post1DevicesDeviceidHumidityOffsetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1DevicesDeviceidSendWithBody request with any body
	Post1DevicesDeviceidSendWithBody(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1DevicesDeviceidSendWithFormdataBody(ctx context.Context, deviceid string, body Post1DevicesDeviceidSendFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1DevicesDeviceidTemperatureOffsetWithBody request with any body
	Post1DevicesDeviceidTemperatureOffsetWithBody(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1DevicesDeviceidTemperatureOffsetWithFormdataBody(ctx context.Context, deviceid string, body Post1DevicesDeviceidTemperatureOffsetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get1EchonetliteAppliances request
	Get1EchonetliteAppliances(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1EchonetliteAppliancesApplianceidRefreshWithBody request with any body
	Post1EchonetliteAppliancesApplianceidRefreshWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1EchonetliteAppliancesApplianceidRefreshWithFormdataBody(ctx context.Context, applianceid string, body Post1EchonetliteAppliancesApplianceidRefreshFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1EchonetliteAppliancesApplianceidSetWithBody request with any body
	Post1EchonetliteAppliancesApplianceidSetWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1EchonetliteAppliancesApplianceidSetWithFormdataBody(ctx context.Context, applianceid string, body Post1EchonetliteAppliancesApplianceidSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get1Homes request
	Get1Homes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1HomesWithBody request with any body
	Post1HomesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1HomesWithFormdataBody(ctx context.Context, body Post1HomesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1HomesHomeidWithBody request with any body
	Post1HomesHomeidWithBody(ctx context.Context, homeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1HomesHomeidWithFormdataBody(ctx context.Context, homeid string, body Post1HomesHomeidFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1HomesHomeidDelete request
	Post1HomesHomeidDelete(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get1HomesHomeidDevices request
	Get1HomesHomeidDevices(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1HomesHomeidInvites request
	Post1HomesHomeidInvites(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1HomesHomeidKickWithBody request with any body
	Post1HomesHomeidKickWithBody(ctx context.Context, homeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1HomesHomeidKickWithFormdataBody(ctx context.Context, homeid string, body Post1HomesHomeidKickFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1HomesHomeidLocation request
	Post1HomesHomeidLocation(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1HomesHomeidLocationDelete request
	Post1HomesHomeidLocationDelete(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1HomesHomeidLocationStateUpdate request
	Post1HomesHomeidLocationStateUpdate(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1HomesHomeidOwnerWithBody request with any body
	Post1HomesHomeidOwnerWithBody(ctx context.Context, homeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1HomesHomeidOwnerWithFormdataBody(ctx context.Context, homeid string, body Post1HomesHomeidOwnerFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1HomesHomeidPart request
	Post1HomesHomeidPart(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1HomesHomeidTransferTohomeidWithBody request with any body
	Post1HomesHomeidTransferTohomeidWithBody(ctx context.Context, homeid string, tohomeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1HomesHomeidTransferTohomeidWithFormdataBody(ctx context.Context, homeid string, tohomeid string, body Post1HomesHomeidTransferTohomeidFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get1HomesHomeidUsers request
	Get1HomesHomeidUsers(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get1InvitesInvitetoken request
	Get1InvitesInvitetoken(ctx context.Context, invitetoken string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1InvitesInvitetoken request
	Post1InvitesInvitetoken(ctx context.Context, invitetoken string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1SignalsSignalidWithBody request with any body
	Post1SignalsSignalidWithBody(ctx context.Context, signalid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1SignalsSignalidWithFormdataBody(ctx context.Context, signalid string, body Post1SignalsSignalidFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1SignalsSignalidDeleteWithBody request with any body
	Post1SignalsSignalidDeleteWithBody(ctx context.Context, signalid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1SignalsSignalidDeleteWithFormdataBody(ctx context.Context, signalid string, body Post1SignalsSignalidDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1SignalsSignalidSendWithBody request with any body
	Post1SignalsSignalidSendWithBody(ctx context.Context, signalid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1SignalsSignalidSendWithFormdataBody(ctx context.Context, signalid string, body Post1SignalsSignalidSendFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get1UsersMe request
	Get1UsersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Post1UsersMeWithBody request with any body
	Post1UsersMeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Post1UsersMeWithFormdataBody(ctx context.Context, body Post1UsersMeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Post1ApplianceOrdersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1ApplianceOrdersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1ApplianceOrdersWithFormdataBody(ctx context.Context, body Post1ApplianceOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1ApplianceOrdersRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get1Appliances(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet1AppliancesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesWithFormdataBody(ctx context.Context, body Post1AppliancesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidRequestWithBody(c.Server, applianceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidRequestWithFormdataBody(c.Server, applianceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidAirconSettingsWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidAirconSettingsRequestWithBody(c.Server, applianceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidAirconSettingsWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidAirconSettingsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidAirconSettingsRequestWithFormdataBody(c.Server, applianceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidDeleteWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidDeleteRequestWithBody(c.Server, applianceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidDeleteWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidDeleteRequestWithFormdataBody(c.Server, applianceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidLightWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidLightRequestWithBody(c.Server, applianceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidLightWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidLightFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidLightRequestWithFormdataBody(c.Server, applianceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidLightProjectorWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidLightProjectorRequestWithBody(c.Server, applianceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidLightProjectorWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidLightProjectorFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidLightProjectorRequestWithFormdataBody(c.Server, applianceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidSignalOrdersWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidSignalOrdersRequestWithBody(c.Server, applianceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidSignalOrdersWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidSignalOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidSignalOrdersRequestWithFormdataBody(c.Server, applianceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get1AppliancesApplianceidSignals(ctx context.Context, applianceid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet1AppliancesApplianceidSignalsRequest(c.Server, applianceid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidSignalsWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidSignalsRequestWithBody(c.Server, applianceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidSignalsWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidSignalsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidSignalsRequestWithFormdataBody(c.Server, applianceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidTvWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidTvRequestWithBody(c.Server, applianceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1AppliancesApplianceidTvWithFormdataBody(ctx context.Context, applianceid string, body Post1AppliancesApplianceidTvFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1AppliancesApplianceidTvRequestWithFormdataBody(c.Server, applianceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1DetectapplianceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1DetectapplianceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1DetectapplianceWithFormdataBody(ctx context.Context, body Post1DetectapplianceFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1DetectapplianceRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get1Devices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet1DevicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1DevicesDeviceidWithBody(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1DevicesDeviceidRequestWithBody(c.Server, deviceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1DevicesDeviceidWithFormdataBody(ctx context.Context, deviceid string, body Post1DevicesDeviceidFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1DevicesDeviceidRequestWithFormdataBody(c.Server, deviceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get1DevicesDeviceidAppliances(ctx context.Context, deviceid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet1DevicesDeviceidAppliancesRequest(c.Server, deviceid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1DevicesDeviceidDeleteWithBody(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1DevicesDeviceidDeleteRequestWithBody(c.Server, deviceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1DevicesDeviceidDeleteWithFormdataBody(ctx context.Context, deviceid string, body Post1DevicesDeviceidDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1DevicesDeviceidDeleteRequestWithFormdataBody(c.Server, deviceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1DevicesDeviceidHumidityOffsetWithBody(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1DevicesDeviceidHumidityOffsetRequestWithBody(c.Server, deviceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1DevicesDeviceidHumidityOffsetWithFormdataBody(ctx context.Context, deviceid string, body Post1DevicesDeviceidHumidityOffsetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1DevicesDeviceidHumidityOffsetRequestWithFormdataBody(c.Server, deviceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1DevicesDeviceidSendWithBody(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1DevicesDeviceidSendRequestWithBody(c.Server, deviceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1DevicesDeviceidSendWithFormdataBody(ctx context.Context, deviceid string, body Post1DevicesDeviceidSendFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1DevicesDeviceidSendRequestWithFormdataBody(c.Server, deviceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1DevicesDeviceidTemperatureOffsetWithBody(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1DevicesDeviceidTemperatureOffsetRequestWithBody(c.Server, deviceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1DevicesDeviceidTemperatureOffsetWithFormdataBody(ctx context.Context, deviceid string, body Post1DevicesDeviceidTemperatureOffsetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1DevicesDeviceidTemperatureOffsetRequestWithFormdataBody(c.Server, deviceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get1EchonetliteAppliances(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet1EchonetliteAppliancesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1EchonetliteAppliancesApplianceidRefreshWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1EchonetliteAppliancesApplianceidRefreshRequestWithBody(c.Server, applianceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1EchonetliteAppliancesApplianceidRefreshWithFormdataBody(ctx context.Context, applianceid string, body Post1EchonetliteAppliancesApplianceidRefreshFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1EchonetliteAppliancesApplianceidRefreshRequestWithFormdataBody(c.Server, applianceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1EchonetliteAppliancesApplianceidSetWithBody(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1EchonetliteAppliancesApplianceidSetRequestWithBody(c.Server, applianceid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1EchonetliteAppliancesApplianceidSetWithFormdataBody(ctx context.Context, applianceid string, body Post1EchonetliteAppliancesApplianceidSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1EchonetliteAppliancesApplianceidSetRequestWithFormdataBody(c.Server, applianceid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get1Homes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet1HomesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesWithFormdataBody(ctx context.Context, body Post1HomesFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidWithBody(ctx context.Context, homeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidRequestWithBody(c.Server, homeid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidWithFormdataBody(ctx context.Context, homeid string, body Post1HomesHomeidFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidRequestWithFormdataBody(c.Server, homeid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidDelete(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidDeleteRequest(c.Server, homeid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get1HomesHomeidDevices(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet1HomesHomeidDevicesRequest(c.Server, homeid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidInvites(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidInvitesRequest(c.Server, homeid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidKickWithBody(ctx context.Context, homeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidKickRequestWithBody(c.Server, homeid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidKickWithFormdataBody(ctx context.Context, homeid string, body Post1HomesHomeidKickFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidKickRequestWithFormdataBody(c.Server, homeid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidLocation(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidLocationRequest(c.Server, homeid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidLocationDelete(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidLocationDeleteRequest(c.Server, homeid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidLocationStateUpdate(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidLocationStateUpdateRequest(c.Server, homeid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidOwnerWithBody(ctx context.Context, homeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidOwnerRequestWithBody(c.Server, homeid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidOwnerWithFormdataBody(ctx context.Context, homeid string, body Post1HomesHomeidOwnerFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidOwnerRequestWithFormdataBody(c.Server, homeid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidPart(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidPartRequest(c.Server, homeid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidTransferTohomeidWithBody(ctx context.Context, homeid string, tohomeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidTransferTohomeidRequestWithBody(c.Server, homeid, tohomeid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1HomesHomeidTransferTohomeidWithFormdataBody(ctx context.Context, homeid string, tohomeid string, body Post1HomesHomeidTransferTohomeidFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1HomesHomeidTransferTohomeidRequestWithFormdataBody(c.Server, homeid, tohomeid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get1HomesHomeidUsers(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet1HomesHomeidUsersRequest(c.Server, homeid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get1InvitesInvitetoken(ctx context.Context, invitetoken string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet1InvitesInvitetokenRequest(c.Server, invitetoken)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1InvitesInvitetoken(ctx context.Context, invitetoken string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1InvitesInvitetokenRequest(c.Server, invitetoken)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1SignalsSignalidWithBody(ctx context.Context, signalid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1SignalsSignalidRequestWithBody(c.Server, signalid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1SignalsSignalidWithFormdataBody(ctx context.Context, signalid string, body Post1SignalsSignalidFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1SignalsSignalidRequestWithFormdataBody(c.Server, signalid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1SignalsSignalidDeleteWithBody(ctx context.Context, signalid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1SignalsSignalidDeleteRequestWithBody(c.Server, signalid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1SignalsSignalidDeleteWithFormdataBody(ctx context.Context, signalid string, body Post1SignalsSignalidDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1SignalsSignalidDeleteRequestWithFormdataBody(c.Server, signalid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1SignalsSignalidSendWithBody(ctx context.Context, signalid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1SignalsSignalidSendRequestWithBody(c.Server, signalid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1SignalsSignalidSendWithFormdataBody(ctx context.Context, signalid string, body Post1SignalsSignalidSendFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1SignalsSignalidSendRequestWithFormdataBody(c.Server, signalid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get1UsersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet1UsersMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1UsersMeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1UsersMeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Post1UsersMeWithFormdataBody(ctx context.Context, body Post1UsersMeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPost1UsersMeRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPost1ApplianceOrdersRequestWithFormdataBody calls the generic Post1ApplianceOrders builder with application/x-www-form-urlencoded body
func NewPost1ApplianceOrdersRequestWithFormdataBody(server string, body Post1ApplianceOrdersFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1ApplianceOrdersRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1ApplianceOrdersRequestWithBody generates requests for Post1ApplianceOrders with any type of body
func NewPost1ApplianceOrdersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/appliance_orders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGet1AppliancesRequest generates requests for Get1Appliances
func NewGet1AppliancesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/appliances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1AppliancesRequestWithFormdataBody calls the generic Post1Appliances builder with application/x-www-form-urlencoded body
func NewPost1AppliancesRequestWithFormdataBody(server string, body Post1AppliancesFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1AppliancesRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1AppliancesRequestWithBody generates requests for Post1Appliances with any type of body
func NewPost1AppliancesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/appliances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1AppliancesApplianceidRequestWithFormdataBody calls the generic Post1AppliancesApplianceid builder with application/x-www-form-urlencoded body
func NewPost1AppliancesApplianceidRequestWithFormdataBody(server string, applianceid string, body Post1AppliancesApplianceidFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1AppliancesApplianceidRequestWithBody(server, applianceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1AppliancesApplianceidRequestWithBody generates requests for Post1AppliancesApplianceid with any type of body
func NewPost1AppliancesApplianceidRequestWithBody(server string, applianceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applianceid", runtime.ParamLocationPath, applianceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/appliances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1AppliancesApplianceidAirconSettingsRequestWithFormdataBody calls the generic Post1AppliancesApplianceidAirconSettings builder with application/x-www-form-urlencoded body
func NewPost1AppliancesApplianceidAirconSettingsRequestWithFormdataBody(server string, applianceid string, body Post1AppliancesApplianceidAirconSettingsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1AppliancesApplianceidAirconSettingsRequestWithBody(server, applianceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1AppliancesApplianceidAirconSettingsRequestWithBody generates requests for Post1AppliancesApplianceidAirconSettings with any type of body
func NewPost1AppliancesApplianceidAirconSettingsRequestWithBody(server string, applianceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applianceid", runtime.ParamLocationPath, applianceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/appliances/%s/aircon_settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1AppliancesApplianceidDeleteRequestWithFormdataBody calls the generic Post1AppliancesApplianceidDelete builder with application/x-www-form-urlencoded body
func NewPost1AppliancesApplianceidDeleteRequestWithFormdataBody(server string, applianceid string, body Post1AppliancesApplianceidDeleteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1AppliancesApplianceidDeleteRequestWithBody(server, applianceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1AppliancesApplianceidDeleteRequestWithBody generates requests for Post1AppliancesApplianceidDelete with any type of body
func NewPost1AppliancesApplianceidDeleteRequestWithBody(server string, applianceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applianceid", runtime.ParamLocationPath, applianceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/appliances/%s/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1AppliancesApplianceidLightRequestWithFormdataBody calls the generic Post1AppliancesApplianceidLight builder with application/x-www-form-urlencoded body
func NewPost1AppliancesApplianceidLightRequestWithFormdataBody(server string, applianceid string, body Post1AppliancesApplianceidLightFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1AppliancesApplianceidLightRequestWithBody(server, applianceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1AppliancesApplianceidLightRequestWithBody generates requests for Post1AppliancesApplianceidLight with any type of body
func NewPost1AppliancesApplianceidLightRequestWithBody(server string, applianceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applianceid", runtime.ParamLocationPath, applianceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/appliances/%s/light", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1AppliancesApplianceidLightProjectorRequestWithFormdataBody calls the generic Post1AppliancesApplianceidLightProjector builder with application/x-www-form-urlencoded body
func NewPost1AppliancesApplianceidLightProjectorRequestWithFormdataBody(server string, applianceid string, body Post1AppliancesApplianceidLightProjectorFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1AppliancesApplianceidLightProjectorRequestWithBody(server, applianceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1AppliancesApplianceidLightProjectorRequestWithBody generates requests for Post1AppliancesApplianceidLightProjector with any type of body
func NewPost1AppliancesApplianceidLightProjectorRequestWithBody(server string, applianceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applianceid", runtime.ParamLocationPath, applianceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/appliances/%s/light_projector", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1AppliancesApplianceidSignalOrdersRequestWithFormdataBody calls the generic Post1AppliancesApplianceidSignalOrders builder with application/x-www-form-urlencoded body
func NewPost1AppliancesApplianceidSignalOrdersRequestWithFormdataBody(server string, applianceid string, body Post1AppliancesApplianceidSignalOrdersFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1AppliancesApplianceidSignalOrdersRequestWithBody(server, applianceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1AppliancesApplianceidSignalOrdersRequestWithBody generates requests for Post1AppliancesApplianceidSignalOrders with any type of body
func NewPost1AppliancesApplianceidSignalOrdersRequestWithBody(server string, applianceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applianceid", runtime.ParamLocationPath, applianceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/appliances/%s/signal_orders", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGet1AppliancesApplianceidSignalsRequest generates requests for Get1AppliancesApplianceidSignals
func NewGet1AppliancesApplianceidSignalsRequest(server string, applianceid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applianceid", runtime.ParamLocationPath, applianceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/appliances/%s/signals", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1AppliancesApplianceidSignalsRequestWithFormdataBody calls the generic Post1AppliancesApplianceidSignals builder with application/x-www-form-urlencoded body
func NewPost1AppliancesApplianceidSignalsRequestWithFormdataBody(server string, applianceid string, body Post1AppliancesApplianceidSignalsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1AppliancesApplianceidSignalsRequestWithBody(server, applianceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1AppliancesApplianceidSignalsRequestWithBody generates requests for Post1AppliancesApplianceidSignals with any type of body
func NewPost1AppliancesApplianceidSignalsRequestWithBody(server string, applianceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applianceid", runtime.ParamLocationPath, applianceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/appliances/%s/signals", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1AppliancesApplianceidTvRequestWithFormdataBody calls the generic Post1AppliancesApplianceidTv builder with application/x-www-form-urlencoded body
func NewPost1AppliancesApplianceidTvRequestWithFormdataBody(server string, applianceid string, body Post1AppliancesApplianceidTvFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1AppliancesApplianceidTvRequestWithBody(server, applianceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1AppliancesApplianceidTvRequestWithBody generates requests for Post1AppliancesApplianceidTv with any type of body
func NewPost1AppliancesApplianceidTvRequestWithBody(server string, applianceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applianceid", runtime.ParamLocationPath, applianceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/appliances/%s/tv", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1DetectapplianceRequestWithFormdataBody calls the generic Post1Detectappliance builder with application/x-www-form-urlencoded body
func NewPost1DetectapplianceRequestWithFormdataBody(server string, body Post1DetectapplianceFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1DetectapplianceRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1DetectapplianceRequestWithBody generates requests for Post1Detectappliance with any type of body
func NewPost1DetectapplianceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/detectappliance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGet1DevicesRequest generates requests for Get1Devices
func NewGet1DevicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/devices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1DevicesDeviceidRequestWithFormdataBody calls the generic Post1DevicesDeviceid builder with application/x-www-form-urlencoded body
func NewPost1DevicesDeviceidRequestWithFormdataBody(server string, deviceid string, body Post1DevicesDeviceidFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1DevicesDeviceidRequestWithBody(server, deviceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1DevicesDeviceidRequestWithBody generates requests for Post1DevicesDeviceid with any type of body
func NewPost1DevicesDeviceidRequestWithBody(server string, deviceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceid", runtime.ParamLocationPath, deviceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/devices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGet1DevicesDeviceidAppliancesRequest generates requests for Get1DevicesDeviceidAppliances
func NewGet1DevicesDeviceidAppliancesRequest(server string, deviceid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceid", runtime.ParamLocationPath, deviceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/devices/%s/appliances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1DevicesDeviceidDeleteRequestWithFormdataBody calls the generic Post1DevicesDeviceidDelete builder with application/x-www-form-urlencoded body
func NewPost1DevicesDeviceidDeleteRequestWithFormdataBody(server string, deviceid string, body Post1DevicesDeviceidDeleteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1DevicesDeviceidDeleteRequestWithBody(server, deviceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1DevicesDeviceidDeleteRequestWithBody generates requests for Post1DevicesDeviceidDelete with any type of body
func NewPost1DevicesDeviceidDeleteRequestWithBody(server string, deviceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceid", runtime.ParamLocationPath, deviceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/devices/%s/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1DevicesDeviceidHumidityOffsetRequestWithFormdataBody calls the generic Post1DevicesDeviceidHumidityOffset builder with application/x-www-form-urlencoded body
func NewPost1DevicesDeviceidHumidityOffsetRequestWithFormdataBody(server string, deviceid string, body Post1DevicesDeviceidHumidityOffsetFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1DevicesDeviceidHumidityOffsetRequestWithBody(server, deviceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1DevicesDeviceidHumidityOffsetRequestWithBody generates requests for Post1DevicesDeviceidHumidityOffset with any type of body
func NewPost1DevicesDeviceidHumidityOffsetRequestWithBody(server string, deviceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceid", runtime.ParamLocationPath, deviceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/devices/%s/humidity_offset", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1DevicesDeviceidSendRequestWithFormdataBody calls the generic Post1DevicesDeviceidSend builder with application/x-www-form-urlencoded body
func NewPost1DevicesDeviceidSendRequestWithFormdataBody(server string, deviceid string, body Post1DevicesDeviceidSendFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1DevicesDeviceidSendRequestWithBody(server, deviceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1DevicesDeviceidSendRequestWithBody generates requests for Post1DevicesDeviceidSend with any type of body
func NewPost1DevicesDeviceidSendRequestWithBody(server string, deviceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceid", runtime.ParamLocationPath, deviceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/devices/%s/send", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1DevicesDeviceidTemperatureOffsetRequestWithFormdataBody calls the generic Post1DevicesDeviceidTemperatureOffset builder with application/x-www-form-urlencoded body
func NewPost1DevicesDeviceidTemperatureOffsetRequestWithFormdataBody(server string, deviceid string, body Post1DevicesDeviceidTemperatureOffsetFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1DevicesDeviceidTemperatureOffsetRequestWithBody(server, deviceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1DevicesDeviceidTemperatureOffsetRequestWithBody generates requests for Post1DevicesDeviceidTemperatureOffset with any type of body
func NewPost1DevicesDeviceidTemperatureOffsetRequestWithBody(server string, deviceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceid", runtime.ParamLocationPath, deviceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/devices/%s/temperature_offset", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGet1EchonetliteAppliancesRequest generates requests for Get1EchonetliteAppliances
func NewGet1EchonetliteAppliancesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/echonetlite/appliances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1EchonetliteAppliancesApplianceidRefreshRequestWithFormdataBody calls the generic Post1EchonetliteAppliancesApplianceidRefresh builder with application/x-www-form-urlencoded body
func NewPost1EchonetliteAppliancesApplianceidRefreshRequestWithFormdataBody(server string, applianceid string, body Post1EchonetliteAppliancesApplianceidRefreshFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1EchonetliteAppliancesApplianceidRefreshRequestWithBody(server, applianceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1EchonetliteAppliancesApplianceidRefreshRequestWithBody generates requests for Post1EchonetliteAppliancesApplianceidRefresh with any type of body
func NewPost1EchonetliteAppliancesApplianceidRefreshRequestWithBody(server string, applianceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applianceid", runtime.ParamLocationPath, applianceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/echonetlite/appliances/%s/refresh", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1EchonetliteAppliancesApplianceidSetRequestWithFormdataBody calls the generic Post1EchonetliteAppliancesApplianceidSet builder with application/x-www-form-urlencoded body
func NewPost1EchonetliteAppliancesApplianceidSetRequestWithFormdataBody(server string, applianceid string, body Post1EchonetliteAppliancesApplianceidSetFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1EchonetliteAppliancesApplianceidSetRequestWithBody(server, applianceid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1EchonetliteAppliancesApplianceidSetRequestWithBody generates requests for Post1EchonetliteAppliancesApplianceidSet with any type of body
func NewPost1EchonetliteAppliancesApplianceidSetRequestWithBody(server string, applianceid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "applianceid", runtime.ParamLocationPath, applianceid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/echonetlite/appliances/%s/set", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGet1HomesRequest generates requests for Get1Homes
func NewGet1HomesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1HomesRequestWithFormdataBody calls the generic Post1Homes builder with application/x-www-form-urlencoded body
func NewPost1HomesRequestWithFormdataBody(server string, body Post1HomesFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1HomesRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1HomesRequestWithBody generates requests for Post1Homes with any type of body
func NewPost1HomesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1HomesHomeidRequestWithFormdataBody calls the generic Post1HomesHomeid builder with application/x-www-form-urlencoded body
func NewPost1HomesHomeidRequestWithFormdataBody(server string, homeid string, body Post1HomesHomeidFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1HomesHomeidRequestWithBody(server, homeid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1HomesHomeidRequestWithBody generates requests for Post1HomesHomeid with any type of body
func NewPost1HomesHomeidRequestWithBody(server string, homeid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeid", runtime.ParamLocationPath, homeid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1HomesHomeidDeleteRequest generates requests for Post1HomesHomeidDelete
func NewPost1HomesHomeidDeleteRequest(server string, homeid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeid", runtime.ParamLocationPath, homeid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes/%s/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet1HomesHomeidDevicesRequest generates requests for Get1HomesHomeidDevices
func NewGet1HomesHomeidDevicesRequest(server string, homeid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeid", runtime.ParamLocationPath, homeid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes/%s/devices", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1HomesHomeidInvitesRequest generates requests for Post1HomesHomeidInvites
func NewPost1HomesHomeidInvitesRequest(server string, homeid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeid", runtime.ParamLocationPath, homeid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes/%s/invites", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1HomesHomeidKickRequestWithFormdataBody calls the generic Post1HomesHomeidKick builder with application/x-www-form-urlencoded body
func NewPost1HomesHomeidKickRequestWithFormdataBody(server string, homeid string, body Post1HomesHomeidKickFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1HomesHomeidKickRequestWithBody(server, homeid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1HomesHomeidKickRequestWithBody generates requests for Post1HomesHomeidKick with any type of body
func NewPost1HomesHomeidKickRequestWithBody(server string, homeid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeid", runtime.ParamLocationPath, homeid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes/%s/kick", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1HomesHomeidLocationRequest generates requests for Post1HomesHomeidLocation
func NewPost1HomesHomeidLocationRequest(server string, homeid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeid", runtime.ParamLocationPath, homeid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes/%s/location", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1HomesHomeidLocationDeleteRequest generates requests for Post1HomesHomeidLocationDelete
func NewPost1HomesHomeidLocationDeleteRequest(server string, homeid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeid", runtime.ParamLocationPath, homeid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes/%s/location/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1HomesHomeidLocationStateUpdateRequest generates requests for Post1HomesHomeidLocationStateUpdate
func NewPost1HomesHomeidLocationStateUpdateRequest(server string, homeid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeid", runtime.ParamLocationPath, homeid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes/%s/location_state/update", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1HomesHomeidOwnerRequestWithFormdataBody calls the generic Post1HomesHomeidOwner builder with application/x-www-form-urlencoded body
func NewPost1HomesHomeidOwnerRequestWithFormdataBody(server string, homeid string, body Post1HomesHomeidOwnerFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1HomesHomeidOwnerRequestWithBody(server, homeid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1HomesHomeidOwnerRequestWithBody generates requests for Post1HomesHomeidOwner with any type of body
func NewPost1HomesHomeidOwnerRequestWithBody(server string, homeid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeid", runtime.ParamLocationPath, homeid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes/%s/owner", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1HomesHomeidPartRequest generates requests for Post1HomesHomeidPart
func NewPost1HomesHomeidPartRequest(server string, homeid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeid", runtime.ParamLocationPath, homeid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes/%s/part", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1HomesHomeidTransferTohomeidRequestWithFormdataBody calls the generic Post1HomesHomeidTransferTohomeid builder with application/x-www-form-urlencoded body
func NewPost1HomesHomeidTransferTohomeidRequestWithFormdataBody(server string, homeid string, tohomeid string, body Post1HomesHomeidTransferTohomeidFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1HomesHomeidTransferTohomeidRequestWithBody(server, homeid, tohomeid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1HomesHomeidTransferTohomeidRequestWithBody generates requests for Post1HomesHomeidTransferTohomeid with any type of body
func NewPost1HomesHomeidTransferTohomeidRequestWithBody(server string, homeid string, tohomeid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeid", runtime.ParamLocationPath, homeid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tohomeid", runtime.ParamLocationPath, tohomeid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes/%s/transfer/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGet1HomesHomeidUsersRequest generates requests for Get1HomesHomeidUsers
func NewGet1HomesHomeidUsersRequest(server string, homeid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeid", runtime.ParamLocationPath, homeid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/homes/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet1InvitesInvitetokenRequest generates requests for Get1InvitesInvitetoken
func NewGet1InvitesInvitetokenRequest(server string, invitetoken string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invitetoken", runtime.ParamLocationPath, invitetoken)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/invites/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1InvitesInvitetokenRequest generates requests for Post1InvitesInvitetoken
func NewPost1InvitesInvitetokenRequest(server string, invitetoken string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invitetoken", runtime.ParamLocationPath, invitetoken)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/invites/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1SignalsSignalidRequestWithFormdataBody calls the generic Post1SignalsSignalid builder with application/x-www-form-urlencoded body
func NewPost1SignalsSignalidRequestWithFormdataBody(server string, signalid string, body Post1SignalsSignalidFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1SignalsSignalidRequestWithBody(server, signalid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1SignalsSignalidRequestWithBody generates requests for Post1SignalsSignalid with any type of body
func NewPost1SignalsSignalidRequestWithBody(server string, signalid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "signalid", runtime.ParamLocationPath, signalid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/signals/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1SignalsSignalidDeleteRequestWithFormdataBody calls the generic Post1SignalsSignalidDelete builder with application/x-www-form-urlencoded body
func NewPost1SignalsSignalidDeleteRequestWithFormdataBody(server string, signalid string, body Post1SignalsSignalidDeleteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1SignalsSignalidDeleteRequestWithBody(server, signalid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1SignalsSignalidDeleteRequestWithBody generates requests for Post1SignalsSignalidDelete with any type of body
func NewPost1SignalsSignalidDeleteRequestWithBody(server string, signalid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "signalid", runtime.ParamLocationPath, signalid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/signals/%s/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPost1SignalsSignalidSendRequestWithFormdataBody calls the generic Post1SignalsSignalidSend builder with application/x-www-form-urlencoded body
func NewPost1SignalsSignalidSendRequestWithFormdataBody(server string, signalid string, body Post1SignalsSignalidSendFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1SignalsSignalidSendRequestWithBody(server, signalid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1SignalsSignalidSendRequestWithBody generates requests for Post1SignalsSignalidSend with any type of body
func NewPost1SignalsSignalidSendRequestWithBody(server string, signalid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "signalid", runtime.ParamLocationPath, signalid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/signals/%s/send", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGet1UsersMeRequest generates requests for Get1UsersMe
func NewGet1UsersMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPost1UsersMeRequestWithFormdataBody calls the generic Post1UsersMe builder with application/x-www-form-urlencoded body
func NewPost1UsersMeRequestWithFormdataBody(server string, body Post1UsersMeFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPost1UsersMeRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPost1UsersMeRequestWithBody generates requests for Post1UsersMe with any type of body
func NewPost1UsersMeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/1/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Post1ApplianceOrdersWithBodyWithResponse request with any body
	Post1ApplianceOrdersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1ApplianceOrdersResponse, error)

	Post1ApplianceOrdersWithFormdataBodyWithResponse(ctx context.Context, body Post1ApplianceOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1ApplianceOrdersResponse, error)

	// Get1AppliancesWithResponse request
	Get1AppliancesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Get1AppliancesResponse, error)

	// Post1AppliancesWithBodyWithResponse request with any body
	Post1AppliancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesResponse, error)

	Post1AppliancesWithFormdataBodyWithResponse(ctx context.Context, body Post1AppliancesFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesResponse, error)

	// Post1AppliancesApplianceidWithBodyWithResponse request with any body
	Post1AppliancesApplianceidWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidResponse, error)

	Post1AppliancesApplianceidWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidResponse, error)

	// Post1AppliancesApplianceidAirconSettingsWithBodyWithResponse request with any body
	Post1AppliancesApplianceidAirconSettingsWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidAirconSettingsResponse, error)

	Post1AppliancesApplianceidAirconSettingsWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidAirconSettingsFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidAirconSettingsResponse, error)

	// Post1AppliancesApplianceidDeleteWithBodyWithResponse request with any body
	Post1AppliancesApplianceidDeleteWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidDeleteResponse, error)

	Post1AppliancesApplianceidDeleteWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidDeleteResponse, error)

	// Post1AppliancesApplianceidLightWithBodyWithResponse request with any body
	Post1AppliancesApplianceidLightWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidLightResponse, error)

	Post1AppliancesApplianceidLightWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidLightFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidLightResponse, error)

	// Post1AppliancesApplianceidLightProjectorWithBodyWithResponse request with any body
	Post1AppliancesApplianceidLightProjectorWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidLightProjectorResponse, error)

	Post1AppliancesApplianceidLightProjectorWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidLightProjectorFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidLightProjectorResponse, error)

	// Post1AppliancesApplianceidSignalOrdersWithBodyWithResponse request with any body
	Post1AppliancesApplianceidSignalOrdersWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidSignalOrdersResponse, error)

	Post1AppliancesApplianceidSignalOrdersWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidSignalOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidSignalOrdersResponse, error)

	// Get1AppliancesApplianceidSignalsWithResponse request
	Get1AppliancesApplianceidSignalsWithResponse(ctx context.Context, applianceid string, reqEditors ...RequestEditorFn) (*Get1AppliancesApplianceidSignalsResponse, error)

	// Post1AppliancesApplianceidSignalsWithBodyWithResponse request with any body
	Post1AppliancesApplianceidSignalsWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidSignalsResponse, error)

	Post1AppliancesApplianceidSignalsWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidSignalsFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidSignalsResponse, error)

	// Post1AppliancesApplianceidTvWithBodyWithResponse request with any body
	Post1AppliancesApplianceidTvWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidTvResponse, error)

	Post1AppliancesApplianceidTvWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidTvFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidTvResponse, error)

	// Post1DetectapplianceWithBodyWithResponse request with any body
	Post1DetectapplianceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1DetectapplianceResponse, error)

	Post1DetectapplianceWithFormdataBodyWithResponse(ctx context.Context, body Post1DetectapplianceFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1DetectapplianceResponse, error)

	// Get1DevicesWithResponse request
	Get1DevicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Get1DevicesResponse, error)

	// Post1DevicesDeviceidWithBodyWithResponse request with any body
	Post1DevicesDeviceidWithBodyWithResponse(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidResponse, error)

	Post1DevicesDeviceidWithFormdataBodyWithResponse(ctx context.Context, deviceid string, body Post1DevicesDeviceidFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidResponse, error)

	// Get1DevicesDeviceidAppliancesWithResponse request
	Get1DevicesDeviceidAppliancesWithResponse(ctx context.Context, deviceid string, reqEditors ...RequestEditorFn) (*Get1DevicesDeviceidAppliancesResponse, error)

	// Post1DevicesDeviceidDeleteWithBodyWithResponse request with any body
	Post1DevicesDeviceidDeleteWithBodyWithResponse(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidDeleteResponse, error)

	Post1DevicesDeviceidDeleteWithFormdataBodyWithResponse(ctx context.Context, deviceid string, body Post1DevicesDeviceidDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidDeleteResponse, error)

	// Post1DevicesDeviceidHumidityOffsetWithBodyWithResponse request with any body
	Post1DevicesDeviceidHumidityOffsetWithBodyWithResponse(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidHumidityOffsetResponse, error)

	Post1DevicesDeviceidHumidityOffsetWithFormdataBodyWithResponse(ctx context.Context, deviceid string, body Post1DevicesDeviceidHumidityOffsetFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidHumidityOffsetResponse, error)

	// Post1DevicesDeviceidSendWithBodyWithResponse request with any body
	Post1DevicesDeviceidSendWithBodyWithResponse(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidSendResponse, error)

	Post1DevicesDeviceidSendWithFormdataBodyWithResponse(ctx context.Context, deviceid string, body Post1DevicesDeviceidSendFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidSendResponse, error)

	// Post1DevicesDeviceidTemperatureOffsetWithBodyWithResponse request with any body
	Post1DevicesDeviceidTemperatureOffsetWithBodyWithResponse(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidTemperatureOffsetResponse, error)

	Post1DevicesDeviceidTemperatureOffsetWithFormdataBodyWithResponse(ctx context.Context, deviceid string, body Post1DevicesDeviceidTemperatureOffsetFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidTemperatureOffsetResponse, error)

	// Get1EchonetliteAppliancesWithResponse request
	Get1EchonetliteAppliancesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Get1EchonetliteAppliancesResponse, error)

	// Post1EchonetliteAppliancesApplianceidRefreshWithBodyWithResponse request with any body
	Post1EchonetliteAppliancesApplianceidRefreshWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1EchonetliteAppliancesApplianceidRefreshResponse, error)

	Post1EchonetliteAppliancesApplianceidRefreshWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1EchonetliteAppliancesApplianceidRefreshFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1EchonetliteAppliancesApplianceidRefreshResponse, error)

	// Post1EchonetliteAppliancesApplianceidSetWithBodyWithResponse request with any body
	Post1EchonetliteAppliancesApplianceidSetWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1EchonetliteAppliancesApplianceidSetResponse, error)

	Post1EchonetliteAppliancesApplianceidSetWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1EchonetliteAppliancesApplianceidSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1EchonetliteAppliancesApplianceidSetResponse, error)

	// Get1HomesWithResponse request
	Get1HomesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Get1HomesResponse, error)

	// Post1HomesWithBodyWithResponse request with any body
	Post1HomesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1HomesResponse, error)

	Post1HomesWithFormdataBodyWithResponse(ctx context.Context, body Post1HomesFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1HomesResponse, error)

	// Post1HomesHomeidWithBodyWithResponse request with any body
	Post1HomesHomeidWithBodyWithResponse(ctx context.Context, homeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1HomesHomeidResponse, error)

	Post1HomesHomeidWithFormdataBodyWithResponse(ctx context.Context, homeid string, body Post1HomesHomeidFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1HomesHomeidResponse, error)

	// Post1HomesHomeidDeleteWithResponse request
	Post1HomesHomeidDeleteWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Post1HomesHomeidDeleteResponse, error)

	// Get1HomesHomeidDevicesWithResponse request
	Get1HomesHomeidDevicesWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Get1HomesHomeidDevicesResponse, error)

	// Post1HomesHomeidInvitesWithResponse request
	Post1HomesHomeidInvitesWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Post1HomesHomeidInvitesResponse, error)

	// Post1HomesHomeidKickWithBodyWithResponse request with any body
	Post1HomesHomeidKickWithBodyWithResponse(ctx context.Context, homeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1HomesHomeidKickResponse, error)

	Post1HomesHomeidKickWithFormdataBodyWithResponse(ctx context.Context, homeid string, body Post1HomesHomeidKickFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1HomesHomeidKickResponse, error)

	// Post1HomesHomeidLocationWithResponse request
	Post1HomesHomeidLocationWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Post1HomesHomeidLocationResponse, error)

	// Post1HomesHomeidLocationDeleteWithResponse request
	Post1HomesHomeidLocationDeleteWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Post1HomesHomeidLocationDeleteResponse, error)

	// Post1HomesHomeidLocationStateUpdateWithResponse request
	Post1HomesHomeidLocationStateUpdateWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Post1HomesHomeidLocationStateUpdateResponse, error)

	// Post1HomesHomeidOwnerWithBodyWithResponse request with any body
	Post1HomesHomeidOwnerWithBodyWithResponse(ctx context.Context, homeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1HomesHomeidOwnerResponse, error)

	Post1HomesHomeidOwnerWithFormdataBodyWithResponse(ctx context.Context, homeid string, body Post1HomesHomeidOwnerFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1HomesHomeidOwnerResponse, error)

	// Post1HomesHomeidPartWithResponse request
	Post1HomesHomeidPartWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Post1HomesHomeidPartResponse, error)

	// Post1HomesHomeidTransferTohomeidWithBodyWithResponse request with any body
	Post1HomesHomeidTransferTohomeidWithBodyWithResponse(ctx context.Context, homeid string, tohomeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1HomesHomeidTransferTohomeidResponse, error)

	Post1HomesHomeidTransferTohomeidWithFormdataBodyWithResponse(ctx context.Context, homeid string, tohomeid string, body Post1HomesHomeidTransferTohomeidFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1HomesHomeidTransferTohomeidResponse, error)

	// Get1HomesHomeidUsersWithResponse request
	Get1HomesHomeidUsersWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Get1HomesHomeidUsersResponse, error)

	// Get1InvitesInvitetokenWithResponse request
	Get1InvitesInvitetokenWithResponse(ctx context.Context, invitetoken string, reqEditors ...RequestEditorFn) (*Get1InvitesInvitetokenResponse, error)

	// Post1InvitesInvitetokenWithResponse request
	Post1InvitesInvitetokenWithResponse(ctx context.Context, invitetoken string, reqEditors ...RequestEditorFn) (*Post1InvitesInvitetokenResponse, error)

	// Post1SignalsSignalidWithBodyWithResponse request with any body
	Post1SignalsSignalidWithBodyWithResponse(ctx context.Context, signalid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1SignalsSignalidResponse, error)

	Post1SignalsSignalidWithFormdataBodyWithResponse(ctx context.Context, signalid string, body Post1SignalsSignalidFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1SignalsSignalidResponse, error)

	// Post1SignalsSignalidDeleteWithBodyWithResponse request with any body
	Post1SignalsSignalidDeleteWithBodyWithResponse(ctx context.Context, signalid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1SignalsSignalidDeleteResponse, error)

	Post1SignalsSignalidDeleteWithFormdataBodyWithResponse(ctx context.Context, signalid string, body Post1SignalsSignalidDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1SignalsSignalidDeleteResponse, error)

	// Post1SignalsSignalidSendWithBodyWithResponse request with any body
	Post1SignalsSignalidSendWithBodyWithResponse(ctx context.Context, signalid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1SignalsSignalidSendResponse, error)

	Post1SignalsSignalidSendWithFormdataBodyWithResponse(ctx context.Context, signalid string, body Post1SignalsSignalidSendFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1SignalsSignalidSendResponse, error)

	// Get1UsersMeWithResponse request
	Get1UsersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Get1UsersMeResponse, error)

	// Post1UsersMeWithBodyWithResponse request with any body
	Post1UsersMeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1UsersMeResponse, error)

	Post1UsersMeWithFormdataBodyWithResponse(ctx context.Context, body Post1UsersMeFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1UsersMeResponse, error)
}

type Post1ApplianceOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1ApplianceOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1ApplianceOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get1AppliancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplianceResponses
}

// Status returns HTTPResponse.Status
func (r Get1AppliancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get1AppliancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1AppliancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplianceResponse
}

// Status returns HTTPResponse.Status
func (r Post1AppliancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1AppliancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1AppliancesApplianceidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplianceResponse
}

// Status returns HTTPResponse.Status
func (r Post1AppliancesApplianceidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1AppliancesApplianceidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1AppliancesApplianceidAirconSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AirconSettingsResponse
}

// Status returns HTTPResponse.Status
func (r Post1AppliancesApplianceidAirconSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1AppliancesApplianceidAirconSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1AppliancesApplianceidDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1AppliancesApplianceidDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1AppliancesApplianceidDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1AppliancesApplianceidLightResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LightState
}

// Status returns HTTPResponse.Status
func (r Post1AppliancesApplianceidLightResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1AppliancesApplianceidLightResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1AppliancesApplianceidLightProjectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1AppliancesApplianceidLightProjectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1AppliancesApplianceidLightProjectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1AppliancesApplianceidSignalOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1AppliancesApplianceidSignalOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1AppliancesApplianceidSignalOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get1AppliancesApplianceidSignalsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Signals
}

// Status returns HTTPResponse.Status
func (r Get1AppliancesApplianceidSignalsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get1AppliancesApplianceidSignalsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1AppliancesApplianceidSignalsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Signal
}

// Status returns HTTPResponse.Status
func (r Post1AppliancesApplianceidSignalsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1AppliancesApplianceidSignalsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1AppliancesApplianceidTvResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TVState
}

// Status returns HTTPResponse.Status
func (r Post1AppliancesApplianceidTvResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1AppliancesApplianceidTvResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1DetectapplianceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplianceModelAndParams
}

// Status returns HTTPResponse.Status
func (r Post1DetectapplianceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1DetectapplianceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get1DevicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceResponses
}

// Status returns HTTPResponse.Status
func (r Get1DevicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get1DevicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1DevicesDeviceidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceResponse
}

// Status returns HTTPResponse.Status
func (r Post1DevicesDeviceidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1DevicesDeviceidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get1DevicesDeviceidAppliancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplianceResponses
}

// Status returns HTTPResponse.Status
func (r Get1DevicesDeviceidAppliancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get1DevicesDeviceidAppliancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1DevicesDeviceidDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1DevicesDeviceidDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1DevicesDeviceidDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1DevicesDeviceidHumidityOffsetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceResponse
}

// Status returns HTTPResponse.Status
func (r Post1DevicesDeviceidHumidityOffsetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1DevicesDeviceidHumidityOffsetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1DevicesDeviceidSendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1DevicesDeviceidSendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1DevicesDeviceidSendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1DevicesDeviceidTemperatureOffsetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceResponse
}

// Status returns HTTPResponse.Status
func (r Post1DevicesDeviceidTemperatureOffsetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1DevicesDeviceidTemperatureOffsetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get1EchonetliteAppliancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EchonetLiteApplianceResponse
}

// Status returns HTTPResponse.Status
func (r Get1EchonetliteAppliancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get1EchonetliteAppliancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1EchonetliteAppliancesApplianceidRefreshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1EchonetliteAppliancesApplianceidRefreshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1EchonetliteAppliancesApplianceidRefreshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1EchonetliteAppliancesApplianceidSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1EchonetliteAppliancesApplianceidSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1EchonetliteAppliancesApplianceidSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get1HomesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HomeResponses
}

// Status returns HTTPResponse.Status
func (r Get1HomesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get1HomesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1HomesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HomeResponse
}

// Status returns HTTPResponse.Status
func (r Post1HomesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1HomesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1HomesHomeidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HomeResponse
}

// Status returns HTTPResponse.Status
func (r Post1HomesHomeidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1HomesHomeidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1HomesHomeidDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1HomesHomeidDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1HomesHomeidDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get1HomesHomeidDevicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceResponses
}

// Status returns HTTPResponse.Status
func (r Get1HomesHomeidDevicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get1HomesHomeidDevicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1HomesHomeidInvitesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HomeInvite
}

// Status returns HTTPResponse.Status
func (r Post1HomesHomeidInvitesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1HomesHomeidInvitesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1HomesHomeidKickResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1HomesHomeidKickResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1HomesHomeidKickResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1HomesHomeidLocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HomeResponse
}

// Status returns HTTPResponse.Status
func (r Post1HomesHomeidLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1HomesHomeidLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1HomesHomeidLocationDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HomeResponse
}

// Status returns HTTPResponse.Status
func (r Post1HomesHomeidLocationDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1HomesHomeidLocationDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1HomesHomeidLocationStateUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1HomesHomeidLocationStateUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1HomesHomeidLocationStateUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1HomesHomeidOwnerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HomeResponse
}

// Status returns HTTPResponse.Status
func (r Post1HomesHomeidOwnerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1HomesHomeidOwnerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1HomesHomeidPartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1HomesHomeidPartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1HomesHomeidPartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1HomesHomeidTransferTohomeidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1HomesHomeidTransferTohomeidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1HomesHomeidTransferTohomeidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get1HomesHomeidUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserAndRoles
}

// Status returns HTTPResponse.Status
func (r Get1HomesHomeidUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get1HomesHomeidUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get1InvitesInvitetokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HomeInvite
}

// Status returns HTTPResponse.Status
func (r Get1InvitesInvitetokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get1InvitesInvitetokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1InvitesInvitetokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HomeResponse
}

// Status returns HTTPResponse.Status
func (r Post1InvitesInvitetokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1InvitesInvitetokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1SignalsSignalidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Signal
}

// Status returns HTTPResponse.Status
func (r Post1SignalsSignalidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1SignalsSignalidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1SignalsSignalidDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1SignalsSignalidDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1SignalsSignalidDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1SignalsSignalidSendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmptyObject
}

// Status returns HTTPResponse.Status
func (r Post1SignalsSignalidSendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1SignalsSignalidSendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get1UsersMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResponse
}

// Status returns HTTPResponse.Status
func (r Get1UsersMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get1UsersMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Post1UsersMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResponse
}

// Status returns HTTPResponse.Status
func (r Post1UsersMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Post1UsersMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Post1ApplianceOrdersWithBodyWithResponse request with arbitrary body returning *Post1ApplianceOrdersResponse
func (c *ClientWithResponses) Post1ApplianceOrdersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1ApplianceOrdersResponse, error) {
	rsp, err := c.Post1ApplianceOrdersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1ApplianceOrdersResponse(rsp)
}

func (c *ClientWithResponses) Post1ApplianceOrdersWithFormdataBodyWithResponse(ctx context.Context, body Post1ApplianceOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1ApplianceOrdersResponse, error) {
	rsp, err := c.Post1ApplianceOrdersWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1ApplianceOrdersResponse(rsp)
}

// Get1AppliancesWithResponse request returning *Get1AppliancesResponse
func (c *ClientWithResponses) Get1AppliancesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Get1AppliancesResponse, error) {
	rsp, err := c.Get1Appliances(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet1AppliancesResponse(rsp)
}

// Post1AppliancesWithBodyWithResponse request with arbitrary body returning *Post1AppliancesResponse
func (c *ClientWithResponses) Post1AppliancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesResponse, error) {
	rsp, err := c.Post1AppliancesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesResponse(rsp)
}

func (c *ClientWithResponses) Post1AppliancesWithFormdataBodyWithResponse(ctx context.Context, body Post1AppliancesFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesResponse, error) {
	rsp, err := c.Post1AppliancesWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesResponse(rsp)
}

// Post1AppliancesApplianceidWithBodyWithResponse request with arbitrary body returning *Post1AppliancesApplianceidResponse
func (c *ClientWithResponses) Post1AppliancesApplianceidWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidWithBody(ctx, applianceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidResponse(rsp)
}

func (c *ClientWithResponses) Post1AppliancesApplianceidWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidWithFormdataBody(ctx, applianceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidResponse(rsp)
}

// Post1AppliancesApplianceidAirconSettingsWithBodyWithResponse request with arbitrary body returning *Post1AppliancesApplianceidAirconSettingsResponse
func (c *ClientWithResponses) Post1AppliancesApplianceidAirconSettingsWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidAirconSettingsResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidAirconSettingsWithBody(ctx, applianceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidAirconSettingsResponse(rsp)
}

func (c *ClientWithResponses) Post1AppliancesApplianceidAirconSettingsWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidAirconSettingsFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidAirconSettingsResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidAirconSettingsWithFormdataBody(ctx, applianceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidAirconSettingsResponse(rsp)
}

// Post1AppliancesApplianceidDeleteWithBodyWithResponse request with arbitrary body returning *Post1AppliancesApplianceidDeleteResponse
func (c *ClientWithResponses) Post1AppliancesApplianceidDeleteWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidDeleteResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidDeleteWithBody(ctx, applianceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidDeleteResponse(rsp)
}

func (c *ClientWithResponses) Post1AppliancesApplianceidDeleteWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidDeleteResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidDeleteWithFormdataBody(ctx, applianceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidDeleteResponse(rsp)
}

// Post1AppliancesApplianceidLightWithBodyWithResponse request with arbitrary body returning *Post1AppliancesApplianceidLightResponse
func (c *ClientWithResponses) Post1AppliancesApplianceidLightWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidLightResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidLightWithBody(ctx, applianceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidLightResponse(rsp)
}

func (c *ClientWithResponses) Post1AppliancesApplianceidLightWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidLightFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidLightResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidLightWithFormdataBody(ctx, applianceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidLightResponse(rsp)
}

// Post1AppliancesApplianceidLightProjectorWithBodyWithResponse request with arbitrary body returning *Post1AppliancesApplianceidLightProjectorResponse
func (c *ClientWithResponses) Post1AppliancesApplianceidLightProjectorWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidLightProjectorResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidLightProjectorWithBody(ctx, applianceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidLightProjectorResponse(rsp)
}

func (c *ClientWithResponses) Post1AppliancesApplianceidLightProjectorWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidLightProjectorFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidLightProjectorResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidLightProjectorWithFormdataBody(ctx, applianceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidLightProjectorResponse(rsp)
}

// Post1AppliancesApplianceidSignalOrdersWithBodyWithResponse request with arbitrary body returning *Post1AppliancesApplianceidSignalOrdersResponse
func (c *ClientWithResponses) Post1AppliancesApplianceidSignalOrdersWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidSignalOrdersResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidSignalOrdersWithBody(ctx, applianceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidSignalOrdersResponse(rsp)
}

func (c *ClientWithResponses) Post1AppliancesApplianceidSignalOrdersWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidSignalOrdersFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidSignalOrdersResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidSignalOrdersWithFormdataBody(ctx, applianceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidSignalOrdersResponse(rsp)
}

// Get1AppliancesApplianceidSignalsWithResponse request returning *Get1AppliancesApplianceidSignalsResponse
func (c *ClientWithResponses) Get1AppliancesApplianceidSignalsWithResponse(ctx context.Context, applianceid string, reqEditors ...RequestEditorFn) (*Get1AppliancesApplianceidSignalsResponse, error) {
	rsp, err := c.Get1AppliancesApplianceidSignals(ctx, applianceid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet1AppliancesApplianceidSignalsResponse(rsp)
}

// Post1AppliancesApplianceidSignalsWithBodyWithResponse request with arbitrary body returning *Post1AppliancesApplianceidSignalsResponse
func (c *ClientWithResponses) Post1AppliancesApplianceidSignalsWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidSignalsResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidSignalsWithBody(ctx, applianceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidSignalsResponse(rsp)
}

func (c *ClientWithResponses) Post1AppliancesApplianceidSignalsWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidSignalsFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidSignalsResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidSignalsWithFormdataBody(ctx, applianceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidSignalsResponse(rsp)
}

// Post1AppliancesApplianceidTvWithBodyWithResponse request with arbitrary body returning *Post1AppliancesApplianceidTvResponse
func (c *ClientWithResponses) Post1AppliancesApplianceidTvWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidTvResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidTvWithBody(ctx, applianceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidTvResponse(rsp)
}

func (c *ClientWithResponses) Post1AppliancesApplianceidTvWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1AppliancesApplianceidTvFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1AppliancesApplianceidTvResponse, error) {
	rsp, err := c.Post1AppliancesApplianceidTvWithFormdataBody(ctx, applianceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1AppliancesApplianceidTvResponse(rsp)
}

// Post1DetectapplianceWithBodyWithResponse request with arbitrary body returning *Post1DetectapplianceResponse
func (c *ClientWithResponses) Post1DetectapplianceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1DetectapplianceResponse, error) {
	rsp, err := c.Post1DetectapplianceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1DetectapplianceResponse(rsp)
}

func (c *ClientWithResponses) Post1DetectapplianceWithFormdataBodyWithResponse(ctx context.Context, body Post1DetectapplianceFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1DetectapplianceResponse, error) {
	rsp, err := c.Post1DetectapplianceWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1DetectapplianceResponse(rsp)
}

// Get1DevicesWithResponse request returning *Get1DevicesResponse
func (c *ClientWithResponses) Get1DevicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Get1DevicesResponse, error) {
	rsp, err := c.Get1Devices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet1DevicesResponse(rsp)
}

// Post1DevicesDeviceidWithBodyWithResponse request with arbitrary body returning *Post1DevicesDeviceidResponse
func (c *ClientWithResponses) Post1DevicesDeviceidWithBodyWithResponse(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidResponse, error) {
	rsp, err := c.Post1DevicesDeviceidWithBody(ctx, deviceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1DevicesDeviceidResponse(rsp)
}

func (c *ClientWithResponses) Post1DevicesDeviceidWithFormdataBodyWithResponse(ctx context.Context, deviceid string, body Post1DevicesDeviceidFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidResponse, error) {
	rsp, err := c.Post1DevicesDeviceidWithFormdataBody(ctx, deviceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1DevicesDeviceidResponse(rsp)
}

// Get1DevicesDeviceidAppliancesWithResponse request returning *Get1DevicesDeviceidAppliancesResponse
func (c *ClientWithResponses) Get1DevicesDeviceidAppliancesWithResponse(ctx context.Context, deviceid string, reqEditors ...RequestEditorFn) (*Get1DevicesDeviceidAppliancesResponse, error) {
	rsp, err := c.Get1DevicesDeviceidAppliances(ctx, deviceid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet1DevicesDeviceidAppliancesResponse(rsp)
}

// Post1DevicesDeviceidDeleteWithBodyWithResponse request with arbitrary body returning *Post1DevicesDeviceidDeleteResponse
func (c *ClientWithResponses) Post1DevicesDeviceidDeleteWithBodyWithResponse(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidDeleteResponse, error) {
	rsp, err := c.Post1DevicesDeviceidDeleteWithBody(ctx, deviceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1DevicesDeviceidDeleteResponse(rsp)
}

func (c *ClientWithResponses) Post1DevicesDeviceidDeleteWithFormdataBodyWithResponse(ctx context.Context, deviceid string, body Post1DevicesDeviceidDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidDeleteResponse, error) {
	rsp, err := c.Post1DevicesDeviceidDeleteWithFormdataBody(ctx, deviceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1DevicesDeviceidDeleteResponse(rsp)
}

// Post1DevicesDeviceidHumidityOffsetWithBodyWithResponse request with arbitrary body returning *Post1DevicesDeviceidHumidityOffsetResponse
func (c *ClientWithResponses) Post1DevicesDeviceidHumidityOffsetWithBodyWithResponse(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidHumidityOffsetResponse, error) {
	rsp, err := c.Post1DevicesDeviceidHumidityOffsetWithBody(ctx, deviceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1DevicesDeviceidHumidityOffsetResponse(rsp)
}

func (c *ClientWithResponses) Post1DevicesDeviceidHumidityOffsetWithFormdataBodyWithResponse(ctx context.Context, deviceid string, body Post1DevicesDeviceidHumidityOffsetFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidHumidityOffsetResponse, error) {
	rsp, err := c.Post1DevicesDeviceidHumidityOffsetWithFormdataBody(ctx, deviceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1DevicesDeviceidHumidityOffsetResponse(rsp)
}

// Post1DevicesDeviceidSendWithBodyWithResponse request with arbitrary body returning *Post1DevicesDeviceidSendResponse
func (c *ClientWithResponses) Post1DevicesDeviceidSendWithBodyWithResponse(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidSendResponse, error) {
	rsp, err := c.Post1DevicesDeviceidSendWithBody(ctx, deviceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1DevicesDeviceidSendResponse(rsp)
}

func (c *ClientWithResponses) Post1DevicesDeviceidSendWithFormdataBodyWithResponse(ctx context.Context, deviceid string, body Post1DevicesDeviceidSendFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidSendResponse, error) {
	rsp, err := c.Post1DevicesDeviceidSendWithFormdataBody(ctx, deviceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1DevicesDeviceidSendResponse(rsp)
}

// Post1DevicesDeviceidTemperatureOffsetWithBodyWithResponse request with arbitrary body returning *Post1DevicesDeviceidTemperatureOffsetResponse
func (c *ClientWithResponses) Post1DevicesDeviceidTemperatureOffsetWithBodyWithResponse(ctx context.Context, deviceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidTemperatureOffsetResponse, error) {
	rsp, err := c.Post1DevicesDeviceidTemperatureOffsetWithBody(ctx, deviceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1DevicesDeviceidTemperatureOffsetResponse(rsp)
}

func (c *ClientWithResponses) Post1DevicesDeviceidTemperatureOffsetWithFormdataBodyWithResponse(ctx context.Context, deviceid string, body Post1DevicesDeviceidTemperatureOffsetFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1DevicesDeviceidTemperatureOffsetResponse, error) {
	rsp, err := c.Post1DevicesDeviceidTemperatureOffsetWithFormdataBody(ctx, deviceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1DevicesDeviceidTemperatureOffsetResponse(rsp)
}

// Get1EchonetliteAppliancesWithResponse request returning *Get1EchonetliteAppliancesResponse
func (c *ClientWithResponses) Get1EchonetliteAppliancesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Get1EchonetliteAppliancesResponse, error) {
	rsp, err := c.Get1EchonetliteAppliances(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet1EchonetliteAppliancesResponse(rsp)
}

// Post1EchonetliteAppliancesApplianceidRefreshWithBodyWithResponse request with arbitrary body returning *Post1EchonetliteAppliancesApplianceidRefreshResponse
func (c *ClientWithResponses) Post1EchonetliteAppliancesApplianceidRefreshWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1EchonetliteAppliancesApplianceidRefreshResponse, error) {
	rsp, err := c.Post1EchonetliteAppliancesApplianceidRefreshWithBody(ctx, applianceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1EchonetliteAppliancesApplianceidRefreshResponse(rsp)
}

func (c *ClientWithResponses) Post1EchonetliteAppliancesApplianceidRefreshWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1EchonetliteAppliancesApplianceidRefreshFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1EchonetliteAppliancesApplianceidRefreshResponse, error) {
	rsp, err := c.Post1EchonetliteAppliancesApplianceidRefreshWithFormdataBody(ctx, applianceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1EchonetliteAppliancesApplianceidRefreshResponse(rsp)
}

// Post1EchonetliteAppliancesApplianceidSetWithBodyWithResponse request with arbitrary body returning *Post1EchonetliteAppliancesApplianceidSetResponse
func (c *ClientWithResponses) Post1EchonetliteAppliancesApplianceidSetWithBodyWithResponse(ctx context.Context, applianceid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1EchonetliteAppliancesApplianceidSetResponse, error) {
	rsp, err := c.Post1EchonetliteAppliancesApplianceidSetWithBody(ctx, applianceid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1EchonetliteAppliancesApplianceidSetResponse(rsp)
}

func (c *ClientWithResponses) Post1EchonetliteAppliancesApplianceidSetWithFormdataBodyWithResponse(ctx context.Context, applianceid string, body Post1EchonetliteAppliancesApplianceidSetFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1EchonetliteAppliancesApplianceidSetResponse, error) {
	rsp, err := c.Post1EchonetliteAppliancesApplianceidSetWithFormdataBody(ctx, applianceid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1EchonetliteAppliancesApplianceidSetResponse(rsp)
}

// Get1HomesWithResponse request returning *Get1HomesResponse
func (c *ClientWithResponses) Get1HomesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Get1HomesResponse, error) {
	rsp, err := c.Get1Homes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet1HomesResponse(rsp)
}

// Post1HomesWithBodyWithResponse request with arbitrary body returning *Post1HomesResponse
func (c *ClientWithResponses) Post1HomesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1HomesResponse, error) {
	rsp, err := c.Post1HomesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesResponse(rsp)
}

func (c *ClientWithResponses) Post1HomesWithFormdataBodyWithResponse(ctx context.Context, body Post1HomesFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1HomesResponse, error) {
	rsp, err := c.Post1HomesWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesResponse(rsp)
}

// Post1HomesHomeidWithBodyWithResponse request with arbitrary body returning *Post1HomesHomeidResponse
func (c *ClientWithResponses) Post1HomesHomeidWithBodyWithResponse(ctx context.Context, homeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1HomesHomeidResponse, error) {
	rsp, err := c.Post1HomesHomeidWithBody(ctx, homeid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidResponse(rsp)
}

func (c *ClientWithResponses) Post1HomesHomeidWithFormdataBodyWithResponse(ctx context.Context, homeid string, body Post1HomesHomeidFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1HomesHomeidResponse, error) {
	rsp, err := c.Post1HomesHomeidWithFormdataBody(ctx, homeid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidResponse(rsp)
}

// Post1HomesHomeidDeleteWithResponse request returning *Post1HomesHomeidDeleteResponse
func (c *ClientWithResponses) Post1HomesHomeidDeleteWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Post1HomesHomeidDeleteResponse, error) {
	rsp, err := c.Post1HomesHomeidDelete(ctx, homeid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidDeleteResponse(rsp)
}

// Get1HomesHomeidDevicesWithResponse request returning *Get1HomesHomeidDevicesResponse
func (c *ClientWithResponses) Get1HomesHomeidDevicesWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Get1HomesHomeidDevicesResponse, error) {
	rsp, err := c.Get1HomesHomeidDevices(ctx, homeid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet1HomesHomeidDevicesResponse(rsp)
}

// Post1HomesHomeidInvitesWithResponse request returning *Post1HomesHomeidInvitesResponse
func (c *ClientWithResponses) Post1HomesHomeidInvitesWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Post1HomesHomeidInvitesResponse, error) {
	rsp, err := c.Post1HomesHomeidInvites(ctx, homeid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidInvitesResponse(rsp)
}

// Post1HomesHomeidKickWithBodyWithResponse request with arbitrary body returning *Post1HomesHomeidKickResponse
func (c *ClientWithResponses) Post1HomesHomeidKickWithBodyWithResponse(ctx context.Context, homeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1HomesHomeidKickResponse, error) {
	rsp, err := c.Post1HomesHomeidKickWithBody(ctx, homeid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidKickResponse(rsp)
}

func (c *ClientWithResponses) Post1HomesHomeidKickWithFormdataBodyWithResponse(ctx context.Context, homeid string, body Post1HomesHomeidKickFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1HomesHomeidKickResponse, error) {
	rsp, err := c.Post1HomesHomeidKickWithFormdataBody(ctx, homeid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidKickResponse(rsp)
}

// Post1HomesHomeidLocationWithResponse request returning *Post1HomesHomeidLocationResponse
func (c *ClientWithResponses) Post1HomesHomeidLocationWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Post1HomesHomeidLocationResponse, error) {
	rsp, err := c.Post1HomesHomeidLocation(ctx, homeid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidLocationResponse(rsp)
}

// Post1HomesHomeidLocationDeleteWithResponse request returning *Post1HomesHomeidLocationDeleteResponse
func (c *ClientWithResponses) Post1HomesHomeidLocationDeleteWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Post1HomesHomeidLocationDeleteResponse, error) {
	rsp, err := c.Post1HomesHomeidLocationDelete(ctx, homeid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidLocationDeleteResponse(rsp)
}

// Post1HomesHomeidLocationStateUpdateWithResponse request returning *Post1HomesHomeidLocationStateUpdateResponse
func (c *ClientWithResponses) Post1HomesHomeidLocationStateUpdateWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Post1HomesHomeidLocationStateUpdateResponse, error) {
	rsp, err := c.Post1HomesHomeidLocationStateUpdate(ctx, homeid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidLocationStateUpdateResponse(rsp)
}

// Post1HomesHomeidOwnerWithBodyWithResponse request with arbitrary body returning *Post1HomesHomeidOwnerResponse
func (c *ClientWithResponses) Post1HomesHomeidOwnerWithBodyWithResponse(ctx context.Context, homeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1HomesHomeidOwnerResponse, error) {
	rsp, err := c.Post1HomesHomeidOwnerWithBody(ctx, homeid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidOwnerResponse(rsp)
}

func (c *ClientWithResponses) Post1HomesHomeidOwnerWithFormdataBodyWithResponse(ctx context.Context, homeid string, body Post1HomesHomeidOwnerFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1HomesHomeidOwnerResponse, error) {
	rsp, err := c.Post1HomesHomeidOwnerWithFormdataBody(ctx, homeid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidOwnerResponse(rsp)
}

// Post1HomesHomeidPartWithResponse request returning *Post1HomesHomeidPartResponse
func (c *ClientWithResponses) Post1HomesHomeidPartWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Post1HomesHomeidPartResponse, error) {
	rsp, err := c.Post1HomesHomeidPart(ctx, homeid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidPartResponse(rsp)
}

// Post1HomesHomeidTransferTohomeidWithBodyWithResponse request with arbitrary body returning *Post1HomesHomeidTransferTohomeidResponse
func (c *ClientWithResponses) Post1HomesHomeidTransferTohomeidWithBodyWithResponse(ctx context.Context, homeid string, tohomeid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1HomesHomeidTransferTohomeidResponse, error) {
	rsp, err := c.Post1HomesHomeidTransferTohomeidWithBody(ctx, homeid, tohomeid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidTransferTohomeidResponse(rsp)
}

func (c *ClientWithResponses) Post1HomesHomeidTransferTohomeidWithFormdataBodyWithResponse(ctx context.Context, homeid string, tohomeid string, body Post1HomesHomeidTransferTohomeidFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1HomesHomeidTransferTohomeidResponse, error) {
	rsp, err := c.Post1HomesHomeidTransferTohomeidWithFormdataBody(ctx, homeid, tohomeid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1HomesHomeidTransferTohomeidResponse(rsp)
}

// Get1HomesHomeidUsersWithResponse request returning *Get1HomesHomeidUsersResponse
func (c *ClientWithResponses) Get1HomesHomeidUsersWithResponse(ctx context.Context, homeid string, reqEditors ...RequestEditorFn) (*Get1HomesHomeidUsersResponse, error) {
	rsp, err := c.Get1HomesHomeidUsers(ctx, homeid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet1HomesHomeidUsersResponse(rsp)
}

// Get1InvitesInvitetokenWithResponse request returning *Get1InvitesInvitetokenResponse
func (c *ClientWithResponses) Get1InvitesInvitetokenWithResponse(ctx context.Context, invitetoken string, reqEditors ...RequestEditorFn) (*Get1InvitesInvitetokenResponse, error) {
	rsp, err := c.Get1InvitesInvitetoken(ctx, invitetoken, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet1InvitesInvitetokenResponse(rsp)
}

// Post1InvitesInvitetokenWithResponse request returning *Post1InvitesInvitetokenResponse
func (c *ClientWithResponses) Post1InvitesInvitetokenWithResponse(ctx context.Context, invitetoken string, reqEditors ...RequestEditorFn) (*Post1InvitesInvitetokenResponse, error) {
	rsp, err := c.Post1InvitesInvitetoken(ctx, invitetoken, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1InvitesInvitetokenResponse(rsp)
}

// Post1SignalsSignalidWithBodyWithResponse request with arbitrary body returning *Post1SignalsSignalidResponse
func (c *ClientWithResponses) Post1SignalsSignalidWithBodyWithResponse(ctx context.Context, signalid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1SignalsSignalidResponse, error) {
	rsp, err := c.Post1SignalsSignalidWithBody(ctx, signalid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1SignalsSignalidResponse(rsp)
}

func (c *ClientWithResponses) Post1SignalsSignalidWithFormdataBodyWithResponse(ctx context.Context, signalid string, body Post1SignalsSignalidFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1SignalsSignalidResponse, error) {
	rsp, err := c.Post1SignalsSignalidWithFormdataBody(ctx, signalid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1SignalsSignalidResponse(rsp)
}

// Post1SignalsSignalidDeleteWithBodyWithResponse request with arbitrary body returning *Post1SignalsSignalidDeleteResponse
func (c *ClientWithResponses) Post1SignalsSignalidDeleteWithBodyWithResponse(ctx context.Context, signalid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1SignalsSignalidDeleteResponse, error) {
	rsp, err := c.Post1SignalsSignalidDeleteWithBody(ctx, signalid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1SignalsSignalidDeleteResponse(rsp)
}

func (c *ClientWithResponses) Post1SignalsSignalidDeleteWithFormdataBodyWithResponse(ctx context.Context, signalid string, body Post1SignalsSignalidDeleteFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1SignalsSignalidDeleteResponse, error) {
	rsp, err := c.Post1SignalsSignalidDeleteWithFormdataBody(ctx, signalid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1SignalsSignalidDeleteResponse(rsp)
}

// Post1SignalsSignalidSendWithBodyWithResponse request with arbitrary body returning *Post1SignalsSignalidSendResponse
func (c *ClientWithResponses) Post1SignalsSignalidSendWithBodyWithResponse(ctx context.Context, signalid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1SignalsSignalidSendResponse, error) {
	rsp, err := c.Post1SignalsSignalidSendWithBody(ctx, signalid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1SignalsSignalidSendResponse(rsp)
}

func (c *ClientWithResponses) Post1SignalsSignalidSendWithFormdataBodyWithResponse(ctx context.Context, signalid string, body Post1SignalsSignalidSendFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1SignalsSignalidSendResponse, error) {
	rsp, err := c.Post1SignalsSignalidSendWithFormdataBody(ctx, signalid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1SignalsSignalidSendResponse(rsp)
}

// Get1UsersMeWithResponse request returning *Get1UsersMeResponse
func (c *ClientWithResponses) Get1UsersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Get1UsersMeResponse, error) {
	rsp, err := c.Get1UsersMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet1UsersMeResponse(rsp)
}

// Post1UsersMeWithBodyWithResponse request with arbitrary body returning *Post1UsersMeResponse
func (c *ClientWithResponses) Post1UsersMeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Post1UsersMeResponse, error) {
	rsp, err := c.Post1UsersMeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1UsersMeResponse(rsp)
}

func (c *ClientWithResponses) Post1UsersMeWithFormdataBodyWithResponse(ctx context.Context, body Post1UsersMeFormdataRequestBody, reqEditors ...RequestEditorFn) (*Post1UsersMeResponse, error) {
	rsp, err := c.Post1UsersMeWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePost1UsersMeResponse(rsp)
}

// ParsePost1ApplianceOrdersResponse parses an HTTP response from a Post1ApplianceOrdersWithResponse call
func ParsePost1ApplianceOrdersResponse(rsp *http.Response) (*Post1ApplianceOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1ApplianceOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet1AppliancesResponse parses an HTTP response from a Get1AppliancesWithResponse call
func ParseGet1AppliancesResponse(rsp *http.Response) (*Get1AppliancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get1AppliancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplianceResponses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1AppliancesResponse parses an HTTP response from a Post1AppliancesWithResponse call
func ParsePost1AppliancesResponse(rsp *http.Response) (*Post1AppliancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1AppliancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplianceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1AppliancesApplianceidResponse parses an HTTP response from a Post1AppliancesApplianceidWithResponse call
func ParsePost1AppliancesApplianceidResponse(rsp *http.Response) (*Post1AppliancesApplianceidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1AppliancesApplianceidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplianceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1AppliancesApplianceidAirconSettingsResponse parses an HTTP response from a Post1AppliancesApplianceidAirconSettingsWithResponse call
func ParsePost1AppliancesApplianceidAirconSettingsResponse(rsp *http.Response) (*Post1AppliancesApplianceidAirconSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1AppliancesApplianceidAirconSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AirconSettingsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1AppliancesApplianceidDeleteResponse parses an HTTP response from a Post1AppliancesApplianceidDeleteWithResponse call
func ParsePost1AppliancesApplianceidDeleteResponse(rsp *http.Response) (*Post1AppliancesApplianceidDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1AppliancesApplianceidDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1AppliancesApplianceidLightResponse parses an HTTP response from a Post1AppliancesApplianceidLightWithResponse call
func ParsePost1AppliancesApplianceidLightResponse(rsp *http.Response) (*Post1AppliancesApplianceidLightResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1AppliancesApplianceidLightResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LightState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1AppliancesApplianceidLightProjectorResponse parses an HTTP response from a Post1AppliancesApplianceidLightProjectorWithResponse call
func ParsePost1AppliancesApplianceidLightProjectorResponse(rsp *http.Response) (*Post1AppliancesApplianceidLightProjectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1AppliancesApplianceidLightProjectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1AppliancesApplianceidSignalOrdersResponse parses an HTTP response from a Post1AppliancesApplianceidSignalOrdersWithResponse call
func ParsePost1AppliancesApplianceidSignalOrdersResponse(rsp *http.Response) (*Post1AppliancesApplianceidSignalOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1AppliancesApplianceidSignalOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet1AppliancesApplianceidSignalsResponse parses an HTTP response from a Get1AppliancesApplianceidSignalsWithResponse call
func ParseGet1AppliancesApplianceidSignalsResponse(rsp *http.Response) (*Get1AppliancesApplianceidSignalsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get1AppliancesApplianceidSignalsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Signals
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1AppliancesApplianceidSignalsResponse parses an HTTP response from a Post1AppliancesApplianceidSignalsWithResponse call
func ParsePost1AppliancesApplianceidSignalsResponse(rsp *http.Response) (*Post1AppliancesApplianceidSignalsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1AppliancesApplianceidSignalsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Signal
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1AppliancesApplianceidTvResponse parses an HTTP response from a Post1AppliancesApplianceidTvWithResponse call
func ParsePost1AppliancesApplianceidTvResponse(rsp *http.Response) (*Post1AppliancesApplianceidTvResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1AppliancesApplianceidTvResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TVState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1DetectapplianceResponse parses an HTTP response from a Post1DetectapplianceWithResponse call
func ParsePost1DetectapplianceResponse(rsp *http.Response) (*Post1DetectapplianceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1DetectapplianceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplianceModelAndParams
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet1DevicesResponse parses an HTTP response from a Get1DevicesWithResponse call
func ParseGet1DevicesResponse(rsp *http.Response) (*Get1DevicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get1DevicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceResponses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1DevicesDeviceidResponse parses an HTTP response from a Post1DevicesDeviceidWithResponse call
func ParsePost1DevicesDeviceidResponse(rsp *http.Response) (*Post1DevicesDeviceidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1DevicesDeviceidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet1DevicesDeviceidAppliancesResponse parses an HTTP response from a Get1DevicesDeviceidAppliancesWithResponse call
func ParseGet1DevicesDeviceidAppliancesResponse(rsp *http.Response) (*Get1DevicesDeviceidAppliancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get1DevicesDeviceidAppliancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplianceResponses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1DevicesDeviceidDeleteResponse parses an HTTP response from a Post1DevicesDeviceidDeleteWithResponse call
func ParsePost1DevicesDeviceidDeleteResponse(rsp *http.Response) (*Post1DevicesDeviceidDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1DevicesDeviceidDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1DevicesDeviceidHumidityOffsetResponse parses an HTTP response from a Post1DevicesDeviceidHumidityOffsetWithResponse call
func ParsePost1DevicesDeviceidHumidityOffsetResponse(rsp *http.Response) (*Post1DevicesDeviceidHumidityOffsetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1DevicesDeviceidHumidityOffsetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1DevicesDeviceidSendResponse parses an HTTP response from a Post1DevicesDeviceidSendWithResponse call
func ParsePost1DevicesDeviceidSendResponse(rsp *http.Response) (*Post1DevicesDeviceidSendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1DevicesDeviceidSendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1DevicesDeviceidTemperatureOffsetResponse parses an HTTP response from a Post1DevicesDeviceidTemperatureOffsetWithResponse call
func ParsePost1DevicesDeviceidTemperatureOffsetResponse(rsp *http.Response) (*Post1DevicesDeviceidTemperatureOffsetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1DevicesDeviceidTemperatureOffsetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet1EchonetliteAppliancesResponse parses an HTTP response from a Get1EchonetliteAppliancesWithResponse call
func ParseGet1EchonetliteAppliancesResponse(rsp *http.Response) (*Get1EchonetliteAppliancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get1EchonetliteAppliancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EchonetLiteApplianceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1EchonetliteAppliancesApplianceidRefreshResponse parses an HTTP response from a Post1EchonetliteAppliancesApplianceidRefreshWithResponse call
func ParsePost1EchonetliteAppliancesApplianceidRefreshResponse(rsp *http.Response) (*Post1EchonetliteAppliancesApplianceidRefreshResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1EchonetliteAppliancesApplianceidRefreshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParsePost1EchonetliteAppliancesApplianceidSetResponse parses an HTTP response from a Post1EchonetliteAppliancesApplianceidSetWithResponse call
func ParsePost1EchonetliteAppliancesApplianceidSetResponse(rsp *http.Response) (*Post1EchonetliteAppliancesApplianceidSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1EchonetliteAppliancesApplianceidSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseGet1HomesResponse parses an HTTP response from a Get1HomesWithResponse call
func ParseGet1HomesResponse(rsp *http.Response) (*Get1HomesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get1HomesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HomeResponses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1HomesResponse parses an HTTP response from a Post1HomesWithResponse call
func ParsePost1HomesResponse(rsp *http.Response) (*Post1HomesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1HomesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HomeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1HomesHomeidResponse parses an HTTP response from a Post1HomesHomeidWithResponse call
func ParsePost1HomesHomeidResponse(rsp *http.Response) (*Post1HomesHomeidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1HomesHomeidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HomeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1HomesHomeidDeleteResponse parses an HTTP response from a Post1HomesHomeidDeleteWithResponse call
func ParsePost1HomesHomeidDeleteResponse(rsp *http.Response) (*Post1HomesHomeidDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1HomesHomeidDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet1HomesHomeidDevicesResponse parses an HTTP response from a Get1HomesHomeidDevicesWithResponse call
func ParseGet1HomesHomeidDevicesResponse(rsp *http.Response) (*Get1HomesHomeidDevicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get1HomesHomeidDevicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceResponses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1HomesHomeidInvitesResponse parses an HTTP response from a Post1HomesHomeidInvitesWithResponse call
func ParsePost1HomesHomeidInvitesResponse(rsp *http.Response) (*Post1HomesHomeidInvitesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1HomesHomeidInvitesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HomeInvite
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1HomesHomeidKickResponse parses an HTTP response from a Post1HomesHomeidKickWithResponse call
func ParsePost1HomesHomeidKickResponse(rsp *http.Response) (*Post1HomesHomeidKickResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1HomesHomeidKickResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1HomesHomeidLocationResponse parses an HTTP response from a Post1HomesHomeidLocationWithResponse call
func ParsePost1HomesHomeidLocationResponse(rsp *http.Response) (*Post1HomesHomeidLocationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1HomesHomeidLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HomeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1HomesHomeidLocationDeleteResponse parses an HTTP response from a Post1HomesHomeidLocationDeleteWithResponse call
func ParsePost1HomesHomeidLocationDeleteResponse(rsp *http.Response) (*Post1HomesHomeidLocationDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1HomesHomeidLocationDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HomeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1HomesHomeidLocationStateUpdateResponse parses an HTTP response from a Post1HomesHomeidLocationStateUpdateWithResponse call
func ParsePost1HomesHomeidLocationStateUpdateResponse(rsp *http.Response) (*Post1HomesHomeidLocationStateUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1HomesHomeidLocationStateUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1HomesHomeidOwnerResponse parses an HTTP response from a Post1HomesHomeidOwnerWithResponse call
func ParsePost1HomesHomeidOwnerResponse(rsp *http.Response) (*Post1HomesHomeidOwnerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1HomesHomeidOwnerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HomeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1HomesHomeidPartResponse parses an HTTP response from a Post1HomesHomeidPartWithResponse call
func ParsePost1HomesHomeidPartResponse(rsp *http.Response) (*Post1HomesHomeidPartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1HomesHomeidPartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1HomesHomeidTransferTohomeidResponse parses an HTTP response from a Post1HomesHomeidTransferTohomeidWithResponse call
func ParsePost1HomesHomeidTransferTohomeidResponse(rsp *http.Response) (*Post1HomesHomeidTransferTohomeidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1HomesHomeidTransferTohomeidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet1HomesHomeidUsersResponse parses an HTTP response from a Get1HomesHomeidUsersWithResponse call
func ParseGet1HomesHomeidUsersResponse(rsp *http.Response) (*Get1HomesHomeidUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get1HomesHomeidUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserAndRoles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet1InvitesInvitetokenResponse parses an HTTP response from a Get1InvitesInvitetokenWithResponse call
func ParseGet1InvitesInvitetokenResponse(rsp *http.Response) (*Get1InvitesInvitetokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get1InvitesInvitetokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HomeInvite
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1InvitesInvitetokenResponse parses an HTTP response from a Post1InvitesInvitetokenWithResponse call
func ParsePost1InvitesInvitetokenResponse(rsp *http.Response) (*Post1InvitesInvitetokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1InvitesInvitetokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HomeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1SignalsSignalidResponse parses an HTTP response from a Post1SignalsSignalidWithResponse call
func ParsePost1SignalsSignalidResponse(rsp *http.Response) (*Post1SignalsSignalidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1SignalsSignalidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Signal
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1SignalsSignalidDeleteResponse parses an HTTP response from a Post1SignalsSignalidDeleteWithResponse call
func ParsePost1SignalsSignalidDeleteResponse(rsp *http.Response) (*Post1SignalsSignalidDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1SignalsSignalidDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1SignalsSignalidSendResponse parses an HTTP response from a Post1SignalsSignalidSendWithResponse call
func ParsePost1SignalsSignalidSendResponse(rsp *http.Response) (*Post1SignalsSignalidSendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1SignalsSignalidSendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmptyObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet1UsersMeResponse parses an HTTP response from a Get1UsersMeWithResponse call
func ParseGet1UsersMeResponse(rsp *http.Response) (*Get1UsersMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get1UsersMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePost1UsersMeResponse parses an HTTP response from a Post1UsersMeWithResponse call
func ParsePost1UsersMeResponse(rsp *http.Response) (*Post1UsersMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Post1UsersMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
