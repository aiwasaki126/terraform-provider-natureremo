// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
