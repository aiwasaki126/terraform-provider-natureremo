// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"8a8AAAD//xDXfhVSrwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
