// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"O5cjrwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
